MIDI CSV Format Specification
Overview
This defines the CSV format for midicsv (MIDI to CSV) and csvmidi (CSV to MIDI) conversion. Each line is a record with comma-separated fields, representing MIDI file data. Lines starting with # or ; are ignored as comments. Blank lines are skipped.

Record Structure
Fields: Minimum 3: Track, Time, Type, followed by type-specific parameters.
Track: Integer, 0 for header/footer, 1+ for data tracks.
Time: Integer, absolute MIDI clocks (ticks) from track start, 0 for meta-events without timing.
Type: String, letters and underscores (e.g., Note_on_c), case-insensitive, no spaces or quotes.
Sorting: Records sorted by Track (ascending), then Time (ascending). Out-of-order records cause errors.
File Structure Records
0, 0, Header, Format, NTracks, Division
First record.
Format: Integer, 0 (single track), 1 (multi-track), 2 (multi-sequence).
NTracks: Integer, total tracks (including header/footer).
Division: Integer, ticks per quarter note (e.g., 480).
Track, 0, Start_track
Marks track start, Track = 1+.
Track, Time, End_track
Marks track end, Time = last event’s time.
0, 0, End_of_file
Last record, closes file.
Meta-Events
Occur within tracks, optional, often at Time=0.
Text fields use ", doubled for internal quotes (e.g., "a""b"), non-graphic as \octal (e.g., \040), \\ for literal \.
Types:
Track, Time, Title_t, "Text": Track/sequence title.
Track, Time, Copyright_t, "Text": Copyright info.
Track, Time, Instrument_name_t, "Text": Instrument name (descriptive).
Track, Time, Marker_t, "Text": Sequence marker.
Track, Time, Cue_point_t, "Text": Sync point.
Track, Time, Lyric_t, "Text": Lyric text.
Track, Time, Text_t, "Text": Generic text.
Track, 0, Sequence_number, Number: Integer 0–65535, sequence order.
Track, Time, MIDI_port, Number: Integer 0–255, MIDI port.
Track, Time, Channel_prefix, Number: Integer 0–15, channel for subsequent events (255 max, >15 undefined).
Track, Time, Time_signature, Num, Denom, Click, NotesQ: Num (int), Denom (power of 2), Click (ticks/click), NotesQ (32nd notes/24 ticks, default 8).
Track, Time, Key_signature, Key, "Major/Minor": Key (-7 to 7), "major" or "minor".
Track, Time, Tempo, Number: Integer 1–16777215, µs/quarter note (e.g., 500000 = 120 BPM).
Track, 0, SMPTE_offset, Hour, Minute, Second, Frame, FracFrame: Integers: 0–23, 0–59, 0–59, 0–29, 0–99.
Track, Time, Sequencer_specific, Length, Data...: Length (0–228), followed by Length bytes (0–255).
Track, Time, Unknown_meta_event, Type, Length, Data...: Type (int), Length (0–228), Length bytes (0–255).
Channel Events (suffix _c)
Fields: Track, Time, Type, Channel, ...
Channel: Integer 0–15.
Types:
Track, Time, Note_on_c, Channel, Note, Velocity: Note (0–127), Velocity (0–127, 0 = off).
Track, Time, Note_off_c, Channel, Note, Velocity: Note (0–127), Velocity (0, typically).
Track, Time, Pitch_bend_c, Channel, Value: Value (0–16383, 8192 = neutral).
Track, Time, Control_c, Channel, Control_num, Value: Control_num (0–127), Value (0–127).
Track, Time, Program_c, Channel, Program_num: Program_num (0–127, patch number).
Track, Time, Channel_aftertouch_c, Channel, Value: Value (0–127, monophonic pressure).
Track, Time, Poly_aftertouch_c, Channel, Note, Value: Note (0–127), Value (0–127, polyphonic pressure).
System Exclusive Events
Fields: Track, Time, Type, Length, Data...
Length: Integer 0–228, number of data bytes.
Data: Length integers (0–255), sent to channel from last Channel_prefix.
Types:
Track, Time, System_exclusive, Length, Data...: Full message.
Track, Time, System_exclusive_packet, Length, Data...: Packetized message.
Example
text

Collapse

Wrap

Copy
0, 0, Header, 1, 2, 480
1, 0, Start_track
1, 0, Title_t, "Test"
1, 0, Tempo, 500000
1, 0, Time_signature, 4, 2, 24, 8
1, 0, Program_c, 0, 19
1, 0, Note_on_c, 0, 60, 80
1, 960, Note_off_c, 0, 60, 0
1, 960, End_track
0, 960, End_of_file

Notes
Specificity: Every field is explicitly defined (type, range, order). No assumptions left to interpretation.
Shortened: Cut descriptions to bare rules, removed examples beyond one, trimmed redundancy (e.g., text string details).
AI-Readable: Strict syntax, no prose, consistent terminology (e.g., "integer" vs. "numeric").


"You are Grok, tasked with generating a MIDI CSV file for a song using the py_midicsv format. Follow this template precisely, using the instructions below to ensure correct length and structure for any timeframe with 10 frequency-specific tracks:

- **Format Instructions:**
  - Multi-line CSV, each record on a new line, spaces after commas (e.g., `0, 0, Header, 1, 11, 96`).
  - Use absolute time in ticks, no comments, sorted by track then time within each track.

- **Input Parameters:**
  - BPM: [Insert BPM, e.g., 90], Tempo = 60,000,000 / BPM µs/quarter note (e.g., 666667 for 90 BPM), per MIDI standard.
  - PPQ: [Insert PPQ, e.g., 96] ticks/quarter note (division), consistent across all tracks.
  - Duration: [Insert bars, e.g., 90] bars, total ticks = [bars] * [beats/bar, e.g., 4] * [PPQ] (e.g., 90 * 4 * 96 = 34,560 ticks), equals [duration in seconds, e.g., 240] seconds at [BPM] BPM.
  - Key: [Insert key, e.g., E minor], root note = [e.g., E4=64].
  - Tracks: 11 (Track 0 for header/footer, Tracks 1–10 for data, each tied to a frequency range).
  - Structure: [Insert structure, e.g., Intro ([bars1] bars), Verse ([bars2] bars), Chorus ([bars3] bars), Bridge ([bars4] bars), Outro ([bars5] bars)], totaling [bars] bars, distribute events proportionally across [total ticks] ticks.
  - Feel/Theme: '[Insert, e.g., dark and eerie classical]', influences rhythm, melody, and mood.
  - Knobs (adjustable, fine-tune the feel):
    - Melodic: [Insert, e.g., 60] (0–100, higher = more diatonic).
    - Rhythmic: [Insert, e.g., 75] (0–100, higher = more syncopation).
    - Atmospheric: [Insert, e.g., 70] (0–100, higher = longer sustains).
    - Dynamic: [Insert, e.g., 50] (0–100, higher = wider velocity range).
    - Energetic: [Insert, e.g., 40] (0–100, higher = more notes/bar).
    - Minimal: [Insert, e.g., 10] (0–100, lower = fewer elements).

- **10 Tracks with Frequency Ranges and General Elements:**
  1. 20–150 Hz (Low Percussion): Kick (C1=36), Channel 9, patch irrelevant, ~4 notes/bar, short hits (e.g., 120 ticks).
  2. 20–150 Hz (Bass Foundation): Sub (root note, e.g., [root note]), Channel 0, patch 38, ~1 note/bar, long sustains (e.g., 1920 ticks).
  3. 150–400 Hz (Mid Bass): Bass (e.g., [root + 12]=[note]–[root + 19]=[note]), Channel 1, patch 39, ~6 notes/bar, 1/8–1/4 patterns.
  4. 400–2000 Hz (Harmony): Chords (e.g., [root + 24]=[note]–[root + 31]=[note]), Channel 2, patch 89, ~2 notes/bar, sustained (e.g., 3840 ticks).
  5. 2000–6000 Hz (Lead Melody): Lead (e.g., [root + 36]=[note]–[root + 43]=[note]), Channel 3, patch 81, ~5 notes/bar, 1/8–1/4 runs.
  6. 2000–6000 Hz (Arpeggio): Arps (e.g., [root + 48]=[note]–[root + 55]=[note]), Channel 4, patch 80, ~8 notes/bar, fast 1/16–1/32 patterns.
  7. 400–2000 Hz (Ambient Texture): Pads (e.g., [root + 24]=[note]–[root + 31]=[note]), Channel 5, patch 91, ~1 note/bar, very long sustains (e.g., 7680 ticks).
  8. 6000–16000 Hz (High Percussion): Hats (closed=42, open=46), Channel 9, patch irrelevant, ~6 notes/bar, 1/16–1/8 hits.
  9. 500–16000 Hz (Effects): Sweeps/FX (e.g., [root + 24]=[note]–[root + 60]=[note]), Channel 6, patch 96, ~0.5 notes/bar, slow risers (e.g., 3840 ticks).
  10. 2000–6000 Hz (Rhythmic Fills): Breaks (e.g., [root + 48]=[note]), Channel 7, patch 99, ~3 notes/bar, chopped patterns.

- **Length Calculation Instructions:**
  - Verify Tempo: Use exact integer division (e.g., 60,000,000 // [BPM]) for accuracy (e.g., 666667 for 90 BPM).
  - Set PPQ: Use [PPQ] consistently (e.g., 96), not 480 unless specified.
  - Calculate Total Ticks: [bars] * [beats/bar] * [PPQ] = [total ticks] (e.g., 90 * 4 * 96 = 34,560).
  - Match Duration: [total ticks] / [PPQ] / [beats/bar] * 60 / [BPM] = [duration in seconds] (e.g., 34,560 / 96 / 4 * 60 / 90 = 240s).
  - Distribute Structure: Assign ticks per section (e.g., Intro: [bars1] * [beats/bar] * [PPQ], Verse: [bars2] * [beats/bar] * [PPQ]), sum to [total ticks].
  - Absolute Time: Start at 0, increment ticks (e.g., 96, 192), last event < [total ticks], End_track and End_of_file at [total ticks].

- **Music Theory Compliance Instructions:**
  - Use [key] scale (e.g., E minor: E, F#, G, A, B, C, D), adjust per Melodic knob (e.g., 60 allows chromatic passing tones).
  - Match [feel/theme] conventions (e.g., classical: ~[notes/bar * bars, e.g., 2 * 90 = 180] events, denser for Energetic > 50).
  - Adjust note density per Energetic/Minimal knobs and track role (e.g., Lead Melody: Energetic 40 = 5 notes/bar).

- **Output Instructions:**
  - Plain-text multi-line CSV, no extra text, ending at [total ticks] ticks.
  - Ensure playback matches [duration in seconds] seconds at [BPM] BPM with [PPQ] PPQ.

Generate a MIDI CSV for a [bars]-bar song with 10 tracks, using the specified settings and 10 frequency-specific tracks. Example to match: